generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String?
  firstName        String
  lastName         String
  phone            String?
  avatar           String?
  role             UserRole       @default(CUSTOMER)
  isActive         Boolean        @default(true)
  isVerified       Boolean        @default(false)
  googleId         String?        @unique
  lastLoginAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  addresses        Address[]
  cart             CartItem[]
  receivedMessages ChatMessage[]  @relation("ReceivedMessages")
  sentMessages     ChatMessage[]  @relation("SentMessages")
  orders           Order[]
  reviews          Review[]
  vendor           Vendor?
  wishlist         WishlistItem[]
  chatRooms        ChatRoom[]     @relation("ChatRoomUsers")

  @@map("users")
}

model Vendor {
  id              String       @id @default(uuid())
  userId          String       @unique
  businessName    String
  businessPhone   String
  businessAddress String
  businessLicense String?
  taxId           String?
  bankAccount     String?
  bankName        String?
  description     String?
  logo            String?
  status          VendorStatus @default(PENDING)
  kycDocuments    String[]
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  orders          OrderItem[]
  products        Product[]
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  icon        String?
  isActive    Boolean    @default(true)
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id            String           @id @default(uuid())
  name          String
  slug          String           @unique
  description   String
  price         Decimal          @db.Decimal(10, 2)
  comparePrice  Decimal?         @db.Decimal(10, 2)
  sku           String           @unique
  barcode       String?
  images        String[]
  isActive      Boolean          @default(true)
  isFeatured    Boolean          @default(false)
  stock         Int              @default(0)
  minStock      Int              @default(0)
  weight        Decimal?         @db.Decimal(8, 2)
  dimensions    Json?
  tags          String[]
  vendorId      String
  categoryId    String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  variants      ProductVariant[]
  category      Category         @relation(fields: [categoryId], references: [id])
  vendor        Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  value      String
  price      Decimal?    @db.Decimal(10, 2)
  stock      Int         @default(0)
  sku        String?     @unique
  image      String?
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model CartItem {
  id        String          @id @default(uuid())
  userId    String
  productId String
  variantId String?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique
  userId          String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentId       String?
  subtotal        Decimal       @db.Decimal(10, 2)
  shippingCost    Decimal       @default(0) @db.Decimal(10, 2)
  tax             Decimal       @default(0) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  currency        String        @default("RWF")
  shippingAddress Json
  billingAddress  Json?
  notes           String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           OrderItem[]
  user            User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  productId String
  variantId String?
  vendorId  String
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  total     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  vendor    Vendor          @relation(fields: [vendorId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  images     String[]
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id         String      @id @default(uuid())
  userId     String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  phone      String
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String      @default("Rwanda")
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model ChatRoom {
  id        String        @id @default(uuid())
  productId String?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  users     User[]        @relation("ChatRoomUsers")

  @@map("chat_rooms")
}

model ChatMessage {
  id         String      @id @default(uuid())
  roomId     String
  senderId   String
  receiverId String
  content    String
  type       MessageType @default(TEXT)
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  room       ChatRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender     User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Banner {
  id        String    @id @default(uuid())
  title     String
  subtitle  String?
  image     String
  link      String?
  position  String    @default("hero")
  isActive  Boolean   @default(true)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("banners")
}

model Settings {
  id    String @id @default(uuid())
  key   String @unique
  value Json

  @@map("settings")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}
